// Generated by rstantools.  Do not edit by hand.

/*
    rmsb is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    rmsb is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with rmsb.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_lrmconppo_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 142> locations_array__ =
  {" (found before start of program)",
  " (in 'lrmconppo', line 94, column 2 to column 17)",
  " (in 'lrmconppo', line 95, column 2 to column 16)",
  " (in 'lrmconppo', line 96, column 2 to column 16)",
  " (in 'lrmconppo', line 97, column 1 to column 22)",
  " (in 'lrmconppo', line 98, column 1 to column 47)",
  " (in 'lrmconppo', line 101, column 2 to column 22)",
  " (in 'lrmconppo', line 102, column 2 to column 65)",
  " (in 'lrmconppo', line 103, column 2 to column 20)",
  " (in 'lrmconppo', line 104, column 17 to column 52)",
  " (in 'lrmconppo', line 104, column 2 to column 52)",
  " (in 'lrmconppo', line 105, column 2 to column 78)",
  " (in 'lrmconppo', line 109, column 4 to column 29)",
  " (in 'lrmconppo', line 111, column 7 to column 45)",
  " (in 'lrmconppo', line 110, column 19 to column 63)",
  " (in 'lrmconppo', line 110, column 3 to line 111, column 45)",
  " (in 'lrmconppo', line 108, column 13 to line 112, column 3)",
  " (in 'lrmconppo', line 108, column 2 to line 112, column 3)",
  " (in 'lrmconppo', line 113, column 2 to column 20)",
  " (in 'lrmconppo', line 114, column 2 to column 53)",
  " (in 'lrmconppo', line 115, column 11 to column 50)",
  " (in 'lrmconppo', line 115, column 1 to column 50)",
  " (in 'lrmconppo', line 116, column 12 to column 57)",
  " (in 'lrmconppo', line 116, column 1 to column 57)",
  " (in 'lrmconppo', line 63, column 2 to column 19)",
  " (in 'lrmconppo', line 64, column 2 to column 19)",
  " (in 'lrmconppo', line 65, column 1 to column 18)",
  " (in 'lrmconppo', line 66, column 2 to column 19)",
  " (in 'lrmconppo', line 67, column 1 to column 19)",
  " (in 'lrmconppo', line 68, column 1 to column 37)",
  " (in 'lrmconppo', line 69, column 9 to column 10)",
  " (in 'lrmconppo', line 69, column 12 to column 13)",
  " (in 'lrmconppo', line 69, column 2 to column 17)",
  " (in 'lrmconppo', line 70, column 8 to column 9)",
  " (in 'lrmconppo', line 70, column 11 to column 12)",
  " (in 'lrmconppo', line 70, column 1 to column 16)",
  " (in 'lrmconppo', line 71, column 8 to column 10)",
  " (in 'lrmconppo', line 71, column 12 to column 13)",
  " (in 'lrmconppo', line 71, column 1 to column 17)",
  " (in 'lrmconppo', line 72, column 8 to column 9)",
  " (in 'lrmconppo', line 72, column 2 to column 42)",
  " (in 'lrmconppo', line 73, column 8 to column 17)",
  " (in 'lrmconppo', line 73, column 1 to column 28)",
  " (in 'lrmconppo', line 74, column 1 to column 19)",
  " (in 'lrmconppo', line 75, column 7 to column 22)",
  " (in 'lrmconppo', line 75, column 1 to column 59)",
  " (in 'lrmconppo', line 78, column 19 to column 20)",
  " (in 'lrmconppo', line 78, column 1 to column 29)",
  " (in 'lrmconppo', line 79, column 2 to column 23)",
  " (in 'lrmconppo', line 81, column 9 to column 11)",
  " (in 'lrmconppo', line 81, column 2 to column 18)",
  " (in 'lrmconppo', line 82, column 9 to column 11)",
  " (in 'lrmconppo', line 82, column 2 to column 18)",
  " (in 'lrmconppo', line 83, column 2 to column 35)",
  " (in 'lrmconppo', line 84, column 7 to column 22)",
  " (in 'lrmconppo', line 84, column 1 to column 48)",
  " (in 'lrmconppo', line 85, column 7 to column 37)",
  " (in 'lrmconppo', line 85, column 1 to column 61)",
  " (in 'lrmconppo', line 88, column 7 to column 8)",
  " (in 'lrmconppo', line 88, column 21 to column 22)",
  " (in 'lrmconppo', line 88, column 1 to column 27)",
  " (in 'lrmconppo', line 89, column 7 to column 8)",
  " (in 'lrmconppo', line 89, column 21 to column 22)",
  " (in 'lrmconppo', line 89, column 1 to column 27)",
  " (in 'lrmconppo', line 90, column 17 to column 32)",
  " (in 'lrmconppo', line 90, column 2 to column 32)",
  " (in 'lrmconppo', line 91, column 16 to column 31)",
  " (in 'lrmconppo', line 91, column 1 to column 31)",
  " (in 'lrmconppo', line 94, column 9 to column 10)",
  " (in 'lrmconppo', line 95, column 9 to column 10)",
  " (in 'lrmconppo', line 96, column 10 to column 11)",
  " (in 'lrmconppo', line 97, column 8 to column 10)",
  " (in 'lrmconppo', line 98, column 7 to column 22)",
  " (in 'lrmconppo', line 101, column 9 to column 14)",
  " (in 'lrmconppo', line 102, column 9 to column 11)",
  " (in 'lrmconppo', line 103, column 9 to column 10)",
  " (in 'lrmconppo', line 6, column 4 to column 20)",
  " (in 'lrmconppo', line 7, column 2 to column 10)",
  " (in 'lrmconppo', line 8, column 11 to column 12)",
  " (in 'lrmconppo', line 8, column 4 to column 18)",
  " (in 'lrmconppo', line 9, column 4 to column 40)",
  " (in 'lrmconppo', line 10, column 2 to column 17)",
  " (in 'lrmconppo', line 11, column 2 to column 14)",
  " (in 'lrmconppo', line 12, column 2 to column 15)",
  " (in 'lrmconppo', line 13, column 2 to column 10)",
  " (in 'lrmconppo', line 14, column 3 to column 12)",
  " (in 'lrmconppo', line 15, column 2 to column 8)",
  " (in 'lrmconppo', line 16, column 2 to column 8)",
  " (in 'lrmconppo', line 17, column 2 to column 39)",
  " (in 'lrmconppo', line 18, column 2 to column 33)",
  " (in 'lrmconppo', line 20, column 6 to column 30)",
  " (in 'lrmconppo', line 21, column 14 to column 44)",
  " (in 'lrmconppo', line 21, column 3 to column 44)",
  " (in 'lrmconppo', line 22, column 14 to column 32)",
  " (in 'lrmconppo', line 22, column 3 to column 32)",
  " (in 'lrmconppo', line 23, column 6 to column 18)",
  " (in 'lrmconppo', line 24, column 3 to column 15)",
  " (in 'lrmconppo', line 25, column 24 to column 32)",
  " (in 'lrmconppo', line 25, column 3 to column 32)",
  " (in 'lrmconppo', line 52, column 6 to column 32)",
  " (in 'lrmconppo', line 53, column 5 to column 31)",
  " (in 'lrmconppo', line 51, column 15 to line 54, column 6)",
  " (in 'lrmconppo', line 51, column 5 to line 54, column 6)",
  " (in 'lrmconppo', line 55, column 8 to column 97)",
  " (in 'lrmconppo', line 50, column 8 to line 56, column 5)",
  " (in 'lrmconppo', line 47, column 15 to column 40)",
  " (in 'lrmconppo', line 47, column 5 to column 40)",
  " (in 'lrmconppo', line 48, column 4 to column 46)",
  " (in 'lrmconppo', line 46, column 19 to line 49, column 4)",
  " (in 'lrmconppo', line 46, column 8 to line 56, column 5)",
  " (in 'lrmconppo', line 43, column 15 to column 38)",
  " (in 'lrmconppo', line 43, column 5 to column 38)",
  " (in 'lrmconppo', line 44, column 4 to column 45)",
  " (in 'lrmconppo', line 42, column 19 to line 45, column 4)",
  " (in 'lrmconppo', line 42, column 8 to line 56, column 5)",
  " (in 'lrmconppo', line 36, column 26 to column 77)",
  " (in 'lrmconppo', line 35, column 26 to column 77)",
  " (in 'lrmconppo', line 35, column 12 to line 36, column 77)",
  " (in 'lrmconppo', line 34, column 26 to column 78)",
  " (in 'lrmconppo', line 34, column 7 to line 36, column 77)",
  " (in 'lrmconppo', line 37, column 26 to column 77)",
  " (in 'lrmconppo', line 37, column 7 to column 77)",
  " (in 'lrmconppo', line 33, column 9 to line 38, column 5)",
  " (in 'lrmconppo', line 30, column 26 to column 53)",
  " (in 'lrmconppo', line 29, column 26 to column 53)",
  " (in 'lrmconppo', line 29, column 12 to line 30, column 53)",
  " (in 'lrmconppo', line 28, column 26 to column 54)",
  " (in 'lrmconppo', line 28, column 7 to line 30, column 53)",
  " (in 'lrmconppo', line 31, column 26 to column 53)",
  " (in 'lrmconppo', line 31, column 7 to column 53)",
  " (in 'lrmconppo', line 27, column 16 to line 32, column 5)",
  " (in 'lrmconppo', line 27, column 5 to line 38, column 5)",
  " (in 'lrmconppo', line 40, column 8 to column 59)",
  " (in 'lrmconppo', line 39, column 28 to column 51)",
  " (in 'lrmconppo', line 39, column 6 to line 40, column 59)",
  " (in 'lrmconppo', line 26, column 14 to line 41, column 5)",
  " (in 'lrmconppo', line 26, column 3 to line 56, column 5)",
  " (in 'lrmconppo', line 57, column 3 to column 15)",
  " (in 'lrmconppo', line 19, column 19 to line 58, column 5)",
  " (in 'lrmconppo', line 19, column 4 to line 58, column 5)",
  " (in 'lrmconppo', line 59, column 4 to column 15)",
  " (in 'lrmconppo', line 5, column 31 to line 60, column 3)"};
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__, typename T6__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_col_vector<T4__>,
                              stan::is_vt_not_complex<T4__>,
                              stan::is_stan_scalar<T5__>,
                              stan::is_stan_scalar<T6__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, stan::base_type_t<T2__>,
                stan::base_type_t<T3__>, stan::base_type_t<T4__>,
                stan::promote_args_t<T5__, T6__>>,-1,1>
pw_log_lik(const T0__& alpha_arg__, const T1__& beta_arg__, const T2__&
           tau_arg__, const T3__& pposcore_arg__, const T4__& gamma_arg__,
           const std::vector<Eigen::Matrix<T5__,1,-1>>& X,
           const std::vector<Eigen::Matrix<T6__,1,-1>>& Z,
           const std::vector<std::vector<int>>& y, const std::vector<int>&
           cluster, std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__, typename T6__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_col_vector<T4__>,
                              stan::is_vt_not_complex<T4__>,
                              stan::is_stan_scalar<T5__>,
                              stan::is_stan_scalar<T6__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, stan::base_type_t<T2__>,
                stan::base_type_t<T3__>, stan::base_type_t<T4__>,
                stan::promote_args_t<T5__, T6__>>,-1,1>
pw_log_lik(const T0__& alpha_arg__, const T1__& beta_arg__, const T2__&
           tau_arg__, const T3__& pposcore_arg__, const T4__& gamma_arg__,
           const std::vector<Eigen::Matrix<T5__,1,-1>>& X,
           const std::vector<Eigen::Matrix<T6__,1,-1>>& Z,
           const std::vector<std::vector<int>>& y, const std::vector<int>&
           cluster, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>,
                             stan::base_type_t<T2__>,
                             stan::base_type_t<T3__>,
                             stan::base_type_t<T4__>,
                             stan::promote_args_t<T5__, T6__>>;
  int current_statement__ = 0;
  const auto& alpha = stan::math::to_ref(alpha_arg__);
  const auto& beta = stan::math::to_ref(beta_arg__);
  const auto& tau = stan::math::to_ref(tau_arg__);
  const auto& pposcore = stan::math::to_ref(pposcore_arg__);
  const auto& gamma = stan::math::to_ref(gamma_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int N = std::numeric_limits<int>::min();
    current_statement__ = 76;
    N = stan::math::size(X);
    local_scalar_t__ ll = DUMMY_VAR__;
    current_statement__ = 78;
    stan::math::validate_non_negative_index("out", "N", N);
    Eigen::Matrix<local_scalar_t__,-1,1> out =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
    int k = std::numeric_limits<int>::min();
    current_statement__ = 80;
    k = stan::math::max(
          stan::math::max(
            stan::model::rvalue(y, "y", stan::model::index_omni(),
              stan::model::index_uni(1))),
          stan::math::max(
            stan::model::rvalue(y, "y", stan::model::index_omni(),
              stan::model::index_uni(2))));
    local_scalar_t__ zeta = DUMMY_VAR__;
    current_statement__ = 81;
    zeta = 0.;
    local_scalar_t__ r = DUMMY_VAR__;
    current_statement__ = 82;
    r = 0.;
    local_scalar_t__ r2 = DUMMY_VAR__;
    current_statement__ = 83;
    r2 = 0.;
    local_scalar_t__ ca = DUMMY_VAR__;
    local_scalar_t__ ca1 = DUMMY_VAR__;
    int a = std::numeric_limits<int>::min();
    int b = std::numeric_limits<int>::min();
    int q = std::numeric_limits<int>::min();
    current_statement__ = 88;
    q = (stan::math::logical_gt(stan::math::size(Z), 0) ? stan::math::cols(
                                                            stan::model::rvalue(
                                                              Z, "Z",
                                                              stan::model::index_uni(
                                                                1))) : 0);
    int Nc = std::numeric_limits<int>::min();
    current_statement__ = 89;
    Nc = stan::math::num_elements(cluster);
    current_statement__ = 139;
    for (int n = 1; n <= N; ++n) {
      local_scalar_t__ eta = DUMMY_VAR__;
      current_statement__ = 90;
      eta = stan::math::multiply(
              stan::model::rvalue(X, "X", stan::model::index_uni(n)), beta);
      current_statement__ = 92;
      if (stan::math::logical_gt(Nc, 0)) {
        current_statement__ = 91;
        eta = (eta +
          stan::model::rvalue(gamma, "gamma",
            stan::model::index_uni(
              stan::model::rvalue(cluster, "cluster",
                stan::model::index_uni(n)))));
      }
      current_statement__ = 94;
      if (stan::math::logical_gt(q, 0)) {
        current_statement__ = 93;
        zeta = stan::math::multiply(
                 stan::model::rvalue(Z, "Z", stan::model::index_uni(n)), tau);
      }
      current_statement__ = 95;
      a = stan::model::rvalue(y, "y", stan::model::index_uni(n),
            stan::model::index_uni(1));
      current_statement__ = 96;
      b = stan::model::rvalue(y, "y", stan::model::index_uni(n),
            stan::model::index_uni(2));
      current_statement__ = 98;
      if ((stan::math::primitive_value(stan::math::logical_eq(a, 1)) &&
          stan::math::primitive_value(stan::math::logical_eq(b, k)))) {
        current_statement__ = 97;
        ll = 0.;
      }
      current_statement__ = 136;
      if (stan::math::logical_eq(a, b)) {
        current_statement__ = 131;
        if (stan::math::logical_eq(q, 0)) {
          current_statement__ = 127;
          if (stan::math::logical_eq(a, 1)) {
            current_statement__ = 126;
            ca = -(stan::model::rvalue(alpha, "alpha",
                     stan::model::index_uni(1))
              + eta);
          } else {
            current_statement__ = 125;
            if (stan::math::logical_eq(a, 2)) {
              current_statement__ = 124;
              ca = (stan::model::rvalue(alpha, "alpha",
                      stan::model::index_uni(1))
                + eta);
            } else {
              current_statement__ = 123;
              ca = (stan::model::rvalue(alpha, "alpha",
                      stan::model::index_uni((a - 1)))
                + eta);
            }
          }
          current_statement__ = 129;
          if ((stan::math::primitive_value(stan::math::logical_gt(a, 1)) &&
              stan::math::primitive_value(stan::math::logical_lt(a, k)))) {
            current_statement__ = 128;
            ca1 = (stan::model::rvalue(alpha, "alpha",
                     stan::model::index_uni(a))
              + eta);
          }
        } else {
          current_statement__ = 119;
          if (stan::math::logical_eq(a, 1)) {
            current_statement__ = 118;
            ca = -((stan::model::rvalue(alpha, "alpha",
                      stan::model::index_uni(1))
              + eta) +
              (stan::model::rvalue(pposcore, "pposcore",
                 stan::model::index_uni(2))
              * zeta));
          } else {
            current_statement__ = 117;
            if (stan::math::logical_eq(a, 2)) {
              current_statement__ = 116;
              ca = ((stan::model::rvalue(alpha, "alpha",
                       stan::model::index_uni(1))
                + eta) +
                (stan::model::rvalue(pposcore, "pposcore",
                   stan::model::index_uni(2))
                * zeta));
            } else {
              current_statement__ = 115;
              ca = ((stan::model::rvalue(alpha, "alpha",
                       stan::model::index_uni((a - 1)))
                + eta) +
                (stan::model::rvalue(pposcore, "pposcore",
                   stan::model::index_uni(a))
                * zeta));
            }
          }
          current_statement__ = 121;
          if ((stan::math::primitive_value(stan::math::logical_gt(a, 1)) &&
              stan::math::primitive_value(stan::math::logical_lt(a, k)))) {
            current_statement__ = 120;
            ca1 = ((stan::model::rvalue(alpha, "alpha",
                      stan::model::index_uni(a))
              + eta) +
              (stan::model::rvalue(pposcore, "pposcore",
                 stan::model::index_uni((a + 1)))
              * zeta));
          }
        }
        current_statement__ = 134;
        if ((stan::math::primitive_value(stan::math::logical_eq(a, 1)) ||
            stan::math::primitive_value(stan::math::logical_eq(a, k)))) {
          current_statement__ = 133;
          ll = stan::math::log_inv_logit(ca);
        } else {
          current_statement__ = 132;
          ll = stan::math::log(((1. / (1. + stan::math::exp(-ca))) - (1. /
                 (1. + stan::math::exp(-ca1)))));
        }
      } else {
        current_statement__ = 114;
        if (stan::math::logical_eq(b, k)) {
          current_statement__ = 111;
          if (stan::math::logical_gt(q, 0)) {
            current_statement__ = 110;
            r = (stan::model::rvalue(pposcore, "pposcore",
                   stan::model::index_uni(a))
              * zeta);
          }
          current_statement__ = 112;
          ll = stan::math::log_inv_logit(
                 ((stan::model::rvalue(alpha, "alpha",
                     stan::model::index_uni((a - 1))) + eta) + r));
        } else {
          current_statement__ = 109;
          if (stan::math::logical_eq(a, 1)) {
            current_statement__ = 106;
            if (stan::math::logical_gt(q, 0)) {
              current_statement__ = 105;
              r = (stan::model::rvalue(pposcore, "pposcore",
                     stan::model::index_uni((a + 1)))
                * zeta);
            }
            current_statement__ = 107;
            ll = stan::math::log_inv_logit(
                   -((stan::model::rvalue(alpha, "alpha",
                        stan::model::index_uni(b)) + eta) + r));
          } else {
            current_statement__ = 102;
            if (stan::math::logical_gt(q, 0)) {
              current_statement__ = 99;
              r = (stan::model::rvalue(pposcore, "pposcore",
                     stan::model::index_uni(a))
                * zeta);
              current_statement__ = 100;
              r2 = (stan::model::rvalue(pposcore, "pposcore",
                      stan::model::index_uni((b + 1)))
                * zeta);
            }
            current_statement__ = 103;
            ll = stan::math::log(((1. / (1. +
                   stan::math::exp(
                     -((stan::model::rvalue(alpha, "alpha",
                          stan::model::index_uni((a - 1))) + eta) + r)))) -
                   (1. / (1. +
                   stan::math::exp(
                     -((stan::model::rvalue(alpha, "alpha",
                          stan::model::index_uni(b)) + eta) + r2))))));
          }
        }
      }
      current_statement__ = 137;
      stan::model::assign(out, ll, "assigning variable out",
        stan::model::index_uni(n));
    }
    current_statement__ = 140;
    return out;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
#include <stan_meta_header.hpp>
class model_lrmconppo final : public model_base_crtp<model_lrmconppo> {
private:
  int N;
  int p;
  int q;
  int k;
  int cn;
  int lpposcore;
  Eigen::Matrix<double,-1,-1> X_data__;
  Eigen::Matrix<double,-1,-1> Z_data__;
  Eigen::Matrix<double,-1,-1> C_data__;
  std::vector<std::vector<int>> y;
  Eigen::Matrix<double,-1,1> pposcore_data__;
  int Nc;
  std::vector<int> cluster;
  Eigen::Matrix<double,-1,1> sdsppo_data__;
  double conc;
  Eigen::Matrix<double,-1,1> cmus_data__;
  Eigen::Matrix<double,-1,1> csds_data__;
  int psigma;
  std::vector<double> rsdmean;
  std::vector<double> rsdsd;
  std::vector<Eigen::Matrix<double,1,-1>> Xr;
  std::vector<Eigen::Matrix<double,1,-1>> Zr;
  int sigmag_1dim__;
  int alpha_1dim__;
  Eigen::Map<Eigen::Matrix<double,-1,-1>> X{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> Z{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> C{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> pposcore{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> sdsppo{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> cmus{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> csds{nullptr, 0};
public:
  ~model_lrmconppo() {}
  model_lrmconppo(stan::io::var_context& context__, unsigned int
                  random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_lrmconppo_namespace::model_lrmconppo";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 24;
      context__.validate_dims("data initialization", "N", "int",
        std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      current_statement__ = 24;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 24;
      stan::math::check_greater_or_equal(function__, "N", N, 1);
      current_statement__ = 25;
      context__.validate_dims("data initialization", "p", "int",
        std::vector<size_t>{});
      p = std::numeric_limits<int>::min();
      current_statement__ = 25;
      p = context__.vals_i("p")[(1 - 1)];
      current_statement__ = 25;
      stan::math::check_greater_or_equal(function__, "p", p, 1);
      current_statement__ = 26;
      context__.validate_dims("data initialization", "q", "int",
        std::vector<size_t>{});
      q = std::numeric_limits<int>::min();
      current_statement__ = 26;
      q = context__.vals_i("q")[(1 - 1)];
      current_statement__ = 26;
      stan::math::check_greater_or_equal(function__, "q", q, 0);
      current_statement__ = 27;
      context__.validate_dims("data initialization", "k", "int",
        std::vector<size_t>{});
      k = std::numeric_limits<int>::min();
      current_statement__ = 27;
      k = context__.vals_i("k")[(1 - 1)];
      current_statement__ = 27;
      stan::math::check_greater_or_equal(function__, "k", k, 2);
      current_statement__ = 28;
      context__.validate_dims("data initialization", "cn", "int",
        std::vector<size_t>{});
      cn = std::numeric_limits<int>::min();
      current_statement__ = 28;
      cn = context__.vals_i("cn")[(1 - 1)];
      current_statement__ = 28;
      stan::math::check_greater_or_equal(function__, "cn", cn, 0);
      current_statement__ = 29;
      context__.validate_dims("data initialization", "lpposcore", "int",
        std::vector<size_t>{});
      lpposcore = std::numeric_limits<int>::min();
      current_statement__ = 29;
      lpposcore = context__.vals_i("lpposcore")[(1 - 1)];
      current_statement__ = 29;
      stan::math::check_greater_or_equal(function__, "lpposcore", lpposcore,
        0);
      current_statement__ = 29;
      stan::math::check_less_or_equal(function__, "lpposcore", lpposcore, k);
      current_statement__ = 30;
      stan::math::validate_non_negative_index("X", "N", N);
      current_statement__ = 31;
      stan::math::validate_non_negative_index("X", "p", p);
      current_statement__ = 32;
      context__.validate_dims("data initialization", "X", "double",
        std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(p)});
      X_data__ = Eigen::Matrix<double,-1,-1>::Constant(N, p,
                   std::numeric_limits<double>::quiet_NaN());
      new (&X) Eigen::Map<Eigen::Matrix<double,-1,-1>>(X_data__.data(), N, p);
      {
        std::vector<local_scalar_t__> X_flat__;
        current_statement__ = 32;
        X_flat__ = context__.vals_r("X");
        current_statement__ = 32;
        pos__ = 1;
        current_statement__ = 32;
        for (int sym1__ = 1; sym1__ <= p; ++sym1__) {
          current_statement__ = 32;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 32;
            stan::model::assign(X, X_flat__[(pos__ - 1)],
              "assigning variable X", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 32;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 33;
      stan::math::validate_non_negative_index("Z", "N", N);
      current_statement__ = 34;
      stan::math::validate_non_negative_index("Z", "q", q);
      current_statement__ = 35;
      context__.validate_dims("data initialization", "Z", "double",
        std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(q)});
      Z_data__ = Eigen::Matrix<double,-1,-1>::Constant(N, q,
                   std::numeric_limits<double>::quiet_NaN());
      new (&Z) Eigen::Map<Eigen::Matrix<double,-1,-1>>(Z_data__.data(), N, q);
      {
        std::vector<local_scalar_t__> Z_flat__;
        current_statement__ = 35;
        Z_flat__ = context__.vals_r("Z");
        current_statement__ = 35;
        pos__ = 1;
        current_statement__ = 35;
        for (int sym1__ = 1; sym1__ <= q; ++sym1__) {
          current_statement__ = 35;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 35;
            stan::model::assign(Z, Z_flat__[(pos__ - 1)],
              "assigning variable Z", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 35;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 36;
      stan::math::validate_non_negative_index("C", "cn", cn);
      current_statement__ = 37;
      stan::math::validate_non_negative_index("C", "p", p);
      current_statement__ = 38;
      context__.validate_dims("data initialization", "C", "double",
        std::vector<size_t>{static_cast<size_t>(cn), static_cast<size_t>(p)});
      C_data__ = Eigen::Matrix<double,-1,-1>::Constant(cn, p,
                   std::numeric_limits<double>::quiet_NaN());
      new (&C) Eigen::Map<Eigen::Matrix<double,-1,-1>>(C_data__.data(), cn,
        p);
      {
        std::vector<local_scalar_t__> C_flat__;
        current_statement__ = 38;
        C_flat__ = context__.vals_r("C");
        current_statement__ = 38;
        pos__ = 1;
        current_statement__ = 38;
        for (int sym1__ = 1; sym1__ <= p; ++sym1__) {
          current_statement__ = 38;
          for (int sym2__ = 1; sym2__ <= cn; ++sym2__) {
            current_statement__ = 38;
            stan::model::assign(C, C_flat__[(pos__ - 1)],
              "assigning variable C", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 38;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 39;
      stan::math::validate_non_negative_index("y", "N", N);
      current_statement__ = 40;
      context__.validate_dims("data initialization", "y", "int",
        std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(2)});
      y = std::vector<std::vector<int>>(N,
            std::vector<int>(2, std::numeric_limits<int>::min()));
      {
        std::vector<int> y_flat__;
        current_statement__ = 40;
        y_flat__ = context__.vals_i("y");
        current_statement__ = 40;
        pos__ = 1;
        current_statement__ = 40;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 40;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 40;
            stan::model::assign(y, y_flat__[(pos__ - 1)],
              "assigning variable y", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 40;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 40;
      stan::math::check_greater_or_equal(function__, "y", y, 1);
      current_statement__ = 40;
      stan::math::check_less_or_equal(function__, "y", y, k);
      current_statement__ = 41;
      stan::math::validate_non_negative_index("pposcore", "lpposcore",
        lpposcore);
      current_statement__ = 42;
      context__.validate_dims("data initialization", "pposcore", "double",
        std::vector<size_t>{static_cast<size_t>(lpposcore)});
      pposcore_data__ = Eigen::Matrix<double,-1,1>::Constant(lpposcore,
                          std::numeric_limits<double>::quiet_NaN());
      new (&pposcore)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(pposcore_data__.data(),
        lpposcore);
      {
        std::vector<local_scalar_t__> pposcore_flat__;
        current_statement__ = 42;
        pposcore_flat__ = context__.vals_r("pposcore");
        current_statement__ = 42;
        pos__ = 1;
        current_statement__ = 42;
        for (int sym1__ = 1; sym1__ <= lpposcore; ++sym1__) {
          current_statement__ = 42;
          stan::model::assign(pposcore, pposcore_flat__[(pos__ - 1)],
            "assigning variable pposcore", stan::model::index_uni(sym1__));
          current_statement__ = 42;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 43;
      context__.validate_dims("data initialization", "Nc", "int",
        std::vector<size_t>{});
      Nc = std::numeric_limits<int>::min();
      current_statement__ = 43;
      Nc = context__.vals_i("Nc")[(1 - 1)];
      current_statement__ = 43;
      stan::math::check_greater_or_equal(function__, "Nc", Nc, 0);
      current_statement__ = 44;
      stan::math::validate_non_negative_index("cluster", "Nc == 0 ? 0 : N",
        (stan::math::logical_eq(Nc, 0) ? 0 : N));
      current_statement__ = 45;
      context__.validate_dims("data initialization", "cluster", "int",
        std::vector<size_t>{static_cast<size_t>(
                              (stan::math::logical_eq(Nc, 0) ? 0 : N))});
      cluster = std::vector<int>((stan::math::logical_eq(Nc, 0) ? 0 : N),
                  std::numeric_limits<int>::min());
      current_statement__ = 45;
      cluster = context__.vals_i("cluster");
      current_statement__ = 45;
      stan::math::check_greater_or_equal(function__, "cluster", cluster, 1);
      current_statement__ = 45;
      stan::math::check_less_or_equal(function__, "cluster", cluster, Nc);
      current_statement__ = 46;
      stan::math::validate_non_negative_index("sdsppo", "q", q);
      current_statement__ = 47;
      context__.validate_dims("data initialization", "sdsppo", "double",
        std::vector<size_t>{static_cast<size_t>(q)});
      sdsppo_data__ = Eigen::Matrix<double,-1,1>::Constant(q,
                        std::numeric_limits<double>::quiet_NaN());
      new (&sdsppo)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(sdsppo_data__.data(), q);
      {
        std::vector<local_scalar_t__> sdsppo_flat__;
        current_statement__ = 47;
        sdsppo_flat__ = context__.vals_r("sdsppo");
        current_statement__ = 47;
        pos__ = 1;
        current_statement__ = 47;
        for (int sym1__ = 1; sym1__ <= q; ++sym1__) {
          current_statement__ = 47;
          stan::model::assign(sdsppo, sdsppo_flat__[(pos__ - 1)],
            "assigning variable sdsppo", stan::model::index_uni(sym1__));
          current_statement__ = 47;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 47;
      stan::math::check_greater_or_equal(function__, "sdsppo", sdsppo, 0);
      current_statement__ = 48;
      context__.validate_dims("data initialization", "conc", "double",
        std::vector<size_t>{});
      conc = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 48;
      conc = context__.vals_r("conc")[(1 - 1)];
      current_statement__ = 48;
      stan::math::check_greater_or_equal(function__, "conc", conc, 0);
      current_statement__ = 49;
      stan::math::validate_non_negative_index("cmus", "cn", cn);
      current_statement__ = 50;
      context__.validate_dims("data initialization", "cmus", "double",
        std::vector<size_t>{static_cast<size_t>(cn)});
      cmus_data__ = Eigen::Matrix<double,-1,1>::Constant(cn,
                      std::numeric_limits<double>::quiet_NaN());
      new (&cmus) Eigen::Map<Eigen::Matrix<double,-1,1>>(cmus_data__.data(),
        cn);
      {
        std::vector<local_scalar_t__> cmus_flat__;
        current_statement__ = 50;
        cmus_flat__ = context__.vals_r("cmus");
        current_statement__ = 50;
        pos__ = 1;
        current_statement__ = 50;
        for (int sym1__ = 1; sym1__ <= cn; ++sym1__) {
          current_statement__ = 50;
          stan::model::assign(cmus, cmus_flat__[(pos__ - 1)],
            "assigning variable cmus", stan::model::index_uni(sym1__));
          current_statement__ = 50;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 51;
      stan::math::validate_non_negative_index("csds", "cn", cn);
      current_statement__ = 52;
      context__.validate_dims("data initialization", "csds", "double",
        std::vector<size_t>{static_cast<size_t>(cn)});
      csds_data__ = Eigen::Matrix<double,-1,1>::Constant(cn,
                      std::numeric_limits<double>::quiet_NaN());
      new (&csds) Eigen::Map<Eigen::Matrix<double,-1,1>>(csds_data__.data(),
        cn);
      {
        std::vector<local_scalar_t__> csds_flat__;
        current_statement__ = 52;
        csds_flat__ = context__.vals_r("csds");
        current_statement__ = 52;
        pos__ = 1;
        current_statement__ = 52;
        for (int sym1__ = 1; sym1__ <= cn; ++sym1__) {
          current_statement__ = 52;
          stan::model::assign(csds, csds_flat__[(pos__ - 1)],
            "assigning variable csds", stan::model::index_uni(sym1__));
          current_statement__ = 52;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 53;
      context__.validate_dims("data initialization", "psigma", "int",
        std::vector<size_t>{});
      psigma = std::numeric_limits<int>::min();
      current_statement__ = 53;
      psigma = context__.vals_i("psigma")[(1 - 1)];
      current_statement__ = 53;
      stan::math::check_greater_or_equal(function__, "psigma", psigma, 1);
      current_statement__ = 53;
      stan::math::check_less_or_equal(function__, "psigma", psigma, 2);
      current_statement__ = 54;
      stan::math::validate_non_negative_index("rsdmean", "Nc == 0 ? 0 : 1",
        (stan::math::logical_eq(Nc, 0) ? 0 : 1));
      current_statement__ = 55;
      context__.validate_dims("data initialization", "rsdmean", "double",
        std::vector<size_t>{static_cast<size_t>(
                              (stan::math::logical_eq(Nc, 0) ? 0 : 1))});
      rsdmean = std::vector<double>((stan::math::logical_eq(Nc, 0) ? 0 : 1),
                  std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 55;
      rsdmean = context__.vals_r("rsdmean");
      current_statement__ = 55;
      stan::math::check_greater_or_equal(function__, "rsdmean", rsdmean, 0);
      current_statement__ = 56;
      stan::math::validate_non_negative_index("rsdsd",
        "Nc == 0 || psigma == 2 ? 0 : 1",
        ((stan::math::primitive_value(stan::math::logical_eq(Nc, 0)) ||
        stan::math::primitive_value(stan::math::logical_eq(psigma, 2))) ? 0 : 1));
      current_statement__ = 57;
      context__.validate_dims("data initialization", "rsdsd", "double",
        std::vector<size_t>{static_cast<size_t>(
                              ((stan::math::primitive_value(
                                  stan::math::logical_eq(Nc, 0)) ||
                              stan::math::primitive_value(
                                stan::math::logical_eq(psigma, 2))) ? 0 : 1))});
      rsdsd = std::vector<double>(((stan::math::primitive_value(
                                      stan::math::logical_eq(Nc, 0)) ||
                stan::math::primitive_value(stan::math::logical_eq(psigma, 2))) ? 0 : 1),
                std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 57;
      rsdsd = context__.vals_r("rsdsd");
      current_statement__ = 57;
      stan::math::check_greater_or_equal(function__, "rsdsd", rsdsd, 0);
      current_statement__ = 58;
      stan::math::validate_non_negative_index("Xr", "N", N);
      current_statement__ = 59;
      stan::math::validate_non_negative_index("Xr", "p", p);
      current_statement__ = 60;
      Xr = std::vector<Eigen::Matrix<double,1,-1>>(N,
             Eigen::Matrix<double,1,-1>::Constant(p,
               std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 61;
      stan::math::validate_non_negative_index("Zr", "N", N);
      current_statement__ = 62;
      stan::math::validate_non_negative_index("Zr", "q", q);
      current_statement__ = 63;
      Zr = std::vector<Eigen::Matrix<double,1,-1>>(N,
             Eigen::Matrix<double,1,-1>::Constant(q,
               std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 65;
      for (int n = 1; n <= N; ++n) {
        current_statement__ = 64;
        stan::model::assign(Xr,
          stan::model::rvalue(X, "X", stan::model::index_uni(n),
            stan::model::index_omni()), "assigning variable Xr",
          stan::model::index_uni(n));
      }
      current_statement__ = 67;
      for (int n = 1; n <= N; ++n) {
        current_statement__ = 66;
        stan::model::assign(Zr,
          stan::model::rvalue(Z, "Z", stan::model::index_uni(n),
            stan::model::index_omni()), "assigning variable Zr",
          stan::model::index_uni(n));
      }
      current_statement__ = 68;
      stan::math::validate_non_negative_index("beta", "p", p);
      current_statement__ = 69;
      stan::math::validate_non_negative_index("tau", "q", q);
      current_statement__ = 70;
      stan::math::validate_positive_index("pi", "k", k);
      current_statement__ = 71;
      stan::math::validate_non_negative_index("gamma_raw", "Nc", Nc);
      current_statement__ = 72;
      sigmag_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 72;
      sigmag_1dim__ = (stan::math::logical_eq(Nc, 0) ? 0 : 1);
      current_statement__ = 72;
      stan::math::validate_non_negative_index("sigmag", "Nc == 0 ? 0 : 1",
        sigmag_1dim__);
      current_statement__ = 73;
      alpha_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 73;
      alpha_1dim__ = (k - 1);
      current_statement__ = 73;
      stan::math::validate_non_negative_index("alpha", "k - 1", alpha_1dim__);
      current_statement__ = 74;
      stan::math::validate_non_negative_index("gamma", "Nc", Nc);
      current_statement__ = 75;
      stan::math::validate_non_negative_index("log_lik", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = p + q + (k - 1) + Nc + sigmag_1dim__;
  }
  inline std::string model_name() const final {
    return "model_lrmconppo";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_lrmconppo_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(p, DUMMY_VAR__);
      current_statement__ = 1;
      beta = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(p);
      Eigen::Matrix<local_scalar_t__,-1,1> tau =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(q, DUMMY_VAR__);
      current_statement__ = 2;
      tau = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(q);
      Eigen::Matrix<local_scalar_t__,-1,1> pi =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(k, DUMMY_VAR__);
      current_statement__ = 3;
      pi = in__.template read_constrain_simplex<
             Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(lp__, k);
      Eigen::Matrix<local_scalar_t__,-1,1> gamma_raw =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(Nc, DUMMY_VAR__);
      current_statement__ = 4;
      gamma_raw = in__.template read<
                    Eigen::Matrix<local_scalar_t__,-1,1>>(Nc);
      std::vector<local_scalar_t__> sigmag =
        std::vector<local_scalar_t__>(sigmag_1dim__, DUMMY_VAR__);
      current_statement__ = 5;
      sigmag = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
                 jacobian__>(0, lp__, sigmag_1dim__);
      Eigen::Matrix<local_scalar_t__,-1,1> alpha =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(alpha_1dim__,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> gamma =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(Nc, DUMMY_VAR__);
      current_statement__ = 7;
      stan::model::assign(gamma,
        (stan::math::logical_eq(Nc, 0) ? stan::math::eval(gamma_raw) : 
        stan::math::eval(
          stan::math::multiply(
            stan::model::rvalue(sigmag, "sigmag", stan::model::index_uni(1)),
            gamma_raw))), "assigning variable gamma");
      Eigen::Matrix<local_scalar_t__,-1,1> log_lik =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 10;
      for (int j = 2; j <= k; ++j) {
        current_statement__ = 9;
        stan::model::assign(alpha,
          stan::math::logit(
            stan::math::sum(
              stan::model::rvalue(pi, "pi", stan::model::index_min_max(j, k)))),
          "assigning variable alpha", stan::model::index_uni((j - 1)));
      }
      current_statement__ = 11;
      stan::model::assign(log_lik,
        pw_log_lik(alpha, beta, tau, pposcore, gamma, Xr, Zr, y, cluster,
          pstream__), "assigning variable log_lik");
      {
        current_statement__ = 17;
        if (stan::math::logical_gt(Nc, 0)) {
          current_statement__ = 12;
          lp_accum__.add(stan::math::std_normal_lpdf<propto__>(gamma_raw));
          current_statement__ = 15;
          if (stan::math::logical_eq(psigma, 1)) {
            current_statement__ = 14;
            lp_accum__.add(stan::math::student_t_lpdf<propto__>(sigmag, 4,
                             stan::model::rvalue(rsdmean, "rsdmean",
                               stan::model::index_uni(1)),
                             stan::model::rvalue(rsdsd, "rsdsd",
                               stan::model::index_uni(1))));
          } else {
            current_statement__ = 13;
            lp_accum__.add(stan::math::exponential_lpdf<propto__>(sigmag, (1.
                             /
                             stan::model::rvalue(rsdmean, "rsdmean",
                               stan::model::index_uni(1)))));
          }
        }
        current_statement__ = 18;
        lp_accum__.add(log_lik);
        current_statement__ = 19;
        lp_accum__.add(stan::math::dirichlet_lpdf<false>(pi,
                         stan::math::rep_vector(conc, k)));
        current_statement__ = 21;
        if (stan::math::logical_gt(q, 0)) {
          current_statement__ = 20;
          lp_accum__.add(stan::math::normal_lpdf<false>(tau, 0, sdsppo));
        }
        current_statement__ = 23;
        if (stan::math::logical_gt(cn, 0)) {
          current_statement__ = 22;
          lp_accum__.add(stan::math::normal_lpdf<false>(
                           stan::math::multiply(C, beta), cmus, csds));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_lrmconppo_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<double,-1,1> beta =
        Eigen::Matrix<double,-1,1>::Constant(p,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      beta = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(p);
      Eigen::Matrix<double,-1,1> tau =
        Eigen::Matrix<double,-1,1>::Constant(q,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      tau = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(q);
      Eigen::Matrix<double,-1,1> pi =
        Eigen::Matrix<double,-1,1>::Constant(k,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      pi = in__.template read_constrain_simplex<
             Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(lp__, k);
      Eigen::Matrix<double,-1,1> gamma_raw =
        Eigen::Matrix<double,-1,1>::Constant(Nc,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      gamma_raw = in__.template read<
                    Eigen::Matrix<local_scalar_t__,-1,1>>(Nc);
      std::vector<double> sigmag =
        std::vector<double>(sigmag_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 5;
      sigmag = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
                 jacobian__>(0, lp__, sigmag_1dim__);
      Eigen::Matrix<double,-1,1> alpha =
        Eigen::Matrix<double,-1,1>::Constant(alpha_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> gamma =
        Eigen::Matrix<double,-1,1>::Constant(Nc,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> log_lik =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      out__.write(beta);
      out__.write(tau);
      out__.write(pi);
      out__.write(gamma_raw);
      out__.write(sigmag);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 7;
      stan::model::assign(gamma,
        (stan::math::logical_eq(Nc, 0) ? stan::math::eval(gamma_raw) : 
        stan::math::eval(
          stan::math::multiply(
            stan::model::rvalue(sigmag, "sigmag", stan::model::index_uni(1)),
            gamma_raw))), "assigning variable gamma");
      current_statement__ = 10;
      for (int j = 2; j <= k; ++j) {
        current_statement__ = 9;
        stan::model::assign(alpha,
          stan::math::logit(
            stan::math::sum(
              stan::model::rvalue(pi, "pi", stan::model::index_min_max(j, k)))),
          "assigning variable alpha", stan::model::index_uni((j - 1)));
      }
      current_statement__ = 11;
      stan::model::assign(log_lik,
        pw_log_lik(alpha, beta, tau, pposcore, gamma, Xr, Zr, y, cluster,
          pstream__), "assigning variable log_lik");
      if (emit_transformed_parameters__) {
        out__.write(alpha);
        out__.write(gamma);
        out__.write(log_lik);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(p, DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(beta,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(p),
        "assigning variable beta");
      out__.write(beta);
      Eigen::Matrix<local_scalar_t__,-1,1> tau =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(q, DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(tau,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(q),
        "assigning variable tau");
      out__.write(tau);
      Eigen::Matrix<local_scalar_t__,-1,1> pi =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(k, DUMMY_VAR__);
      current_statement__ = 3;
      stan::model::assign(pi,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(k),
        "assigning variable pi");
      out__.write_free_simplex(pi);
      Eigen::Matrix<local_scalar_t__,-1,1> gamma_raw =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(Nc, DUMMY_VAR__);
      current_statement__ = 4;
      stan::model::assign(gamma_raw,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(Nc),
        "assigning variable gamma_raw");
      out__.write(gamma_raw);
      std::vector<local_scalar_t__> sigmag =
        std::vector<local_scalar_t__>(sigmag_1dim__, DUMMY_VAR__);
      current_statement__ = 5;
      stan::model::assign(sigmag,
        in__.read<std::vector<local_scalar_t__>>(sigmag_1dim__),
        "assigning variable sigmag");
      out__.write_free_lb(0, sigmag);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "beta", "double",
        std::vector<size_t>{static_cast<size_t>(p)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "tau", "double",
        std::vector<size_t>{static_cast<size_t>(q)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "pi", "double",
        std::vector<size_t>{static_cast<size_t>(k)});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "gamma_raw",
        "double", std::vector<size_t>{static_cast<size_t>(Nc)});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "sigmag", "double",
        std::vector<size_t>{static_cast<size_t>(sigmag_1dim__)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(p, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> beta_flat__;
        current_statement__ = 1;
        beta_flat__ = context__.vals_r("beta");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= p; ++sym1__) {
          current_statement__ = 1;
          stan::model::assign(beta, beta_flat__[(pos__ - 1)],
            "assigning variable beta", stan::model::index_uni(sym1__));
          current_statement__ = 1;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(beta);
      Eigen::Matrix<local_scalar_t__,-1,1> tau =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(q, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> tau_flat__;
        current_statement__ = 2;
        tau_flat__ = context__.vals_r("tau");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= q; ++sym1__) {
          current_statement__ = 2;
          stan::model::assign(tau, tau_flat__[(pos__ - 1)],
            "assigning variable tau", stan::model::index_uni(sym1__));
          current_statement__ = 2;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(tau);
      Eigen::Matrix<local_scalar_t__,-1,1> pi =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(k, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> pi_flat__;
        current_statement__ = 3;
        pi_flat__ = context__.vals_r("pi");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
          current_statement__ = 3;
          stan::model::assign(pi, pi_flat__[(pos__ - 1)],
            "assigning variable pi", stan::model::index_uni(sym1__));
          current_statement__ = 3;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_simplex(pi);
      Eigen::Matrix<local_scalar_t__,-1,1> gamma_raw =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(Nc, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> gamma_raw_flat__;
        current_statement__ = 4;
        gamma_raw_flat__ = context__.vals_r("gamma_raw");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= Nc; ++sym1__) {
          current_statement__ = 4;
          stan::model::assign(gamma_raw, gamma_raw_flat__[(pos__ - 1)],
            "assigning variable gamma_raw", stan::model::index_uni(sym1__));
          current_statement__ = 4;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(gamma_raw);
      std::vector<local_scalar_t__> sigmag =
        std::vector<local_scalar_t__>(sigmag_1dim__, DUMMY_VAR__);
      current_statement__ = 5;
      sigmag = context__.vals_r("sigmag");
      out__.write_free_lb(0, sigmag);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"beta", "tau", "pi", "gamma_raw",
                "sigmag"};
    if (emit_transformed_parameters__) {
      std::vector<std::string> temp{"alpha", "gamma", "log_lik"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(p)},
                std::vector<size_t>{static_cast<size_t>(q)},
                std::vector<size_t>{static_cast<size_t>(k)},
                std::vector<size_t>{static_cast<size_t>(Nc)},
                std::vector<size_t>{static_cast<size_t>(sigmag_1dim__)}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(alpha_1dim__)},
             std::vector<size_t>{static_cast<size_t>(Nc)},
             std::vector<size_t>{static_cast<size_t>(N)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= p; ++sym1__) {
      param_names__.emplace_back(std::string() + "beta" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= q; ++sym1__) {
      param_names__.emplace_back(std::string() + "tau" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
      param_names__.emplace_back(std::string() + "pi" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= Nc; ++sym1__) {
      param_names__.emplace_back(std::string() + "gamma_raw" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= sigmag_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigmag" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= alpha_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "alpha" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= Nc; ++sym1__) {
        param_names__.emplace_back(std::string() + "gamma" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= p; ++sym1__) {
      param_names__.emplace_back(std::string() + "beta" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= q; ++sym1__) {
      param_names__.emplace_back(std::string() + "tau" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= (k - 1); ++sym1__) {
      param_names__.emplace_back(std::string() + "pi" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= Nc; ++sym1__) {
      param_names__.emplace_back(std::string() + "gamma_raw" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= sigmag_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigmag" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= alpha_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "alpha" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= Nc; ++sym1__) {
        param_names__.emplace_back(std::string() + "gamma" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(p) + "},\"block\":\"parameters\"},{\"name\":\"tau\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(q) + "},\"block\":\"parameters\"},{\"name\":\"pi\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(k) + "},\"block\":\"parameters\"},{\"name\":\"gamma_raw\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(Nc) + "},\"block\":\"parameters\"},{\"name\":\"sigmag\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(sigmag_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(alpha_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"gamma\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(Nc) + "},\"block\":\"transformed_parameters\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(p) + "},\"block\":\"parameters\"},{\"name\":\"tau\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(q) + "},\"block\":\"parameters\"},{\"name\":\"pi\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string((k -1)) + "},\"block\":\"parameters\"},{\"name\":\"gamma_raw\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(Nc) + "},\"block\":\"parameters\"},{\"name\":\"sigmag\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(sigmag_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(alpha_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"gamma\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(Nc) + "},\"block\":\"transformed_parameters\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((p + q) + k) + Nc) + sigmag_1dim__);
    const size_t num_transformed = emit_transformed_parameters *
      (((alpha_1dim__ + Nc) + N));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((p + q) + k) + Nc) + sigmag_1dim__);
    const size_t num_transformed = emit_transformed_parameters *
      (((alpha_1dim__ + Nc) + N));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_lrmconppo_namespace::model_lrmconppo;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_lrmconppo_namespace::profiles__;
}
#endif
#endif
